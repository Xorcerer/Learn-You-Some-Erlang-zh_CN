# -*- coding: UTF-8 -*-



真正的开始


Erlang是一个相对小而简单的语言（就如C相对于C++而言）。这一章将覆盖大部分Erlang为数不多基础数据类型。强烈建议阅读本章，因为它解释了你日后用Erlang写的所有程序的各个组成部分。


数字

在Erlang的Shell里，表达式需要以后面跟有空格（或者换行、#REVIEWME#）的句号“.”结束，否则他们不会被执行。你可以通过逗号“,”分隔表达式，但是只有最后一句表达式的结果会被显示（在Shell中），虽然其他同样会被执行。这对于大多数人来说，的确是不正常的语法，它源自Erlang还是被Prolog直接实现的日子，后者是一种逻辑编程语言。

以上一章介绍的方式打开Erlang的Shell，让我们开始输入一些东西。

{{{
1> 2 + 15.
17
2> 49 * 100.
4900
3> 1892 - 1472.
420
4> 5 / 2.
2.5
5> 5 div 2.
2
6> 5 rem 2.
1
}}}

你应该发现，Erlang并不在乎你是输入了一个浮点数还是整数：两种类型在算术运算时都被支持。在你的角度看，Erlang的数学运算符能无差别对待的，几乎也只有整数和浮点数了。当然，如果你需要一个“整数到整数”的除法，使用“div”，需要求模运算，使用 rem （remainder的缩写）。

注意，我们可以在同一个表达式里使用多个运算符，数学运算符遵从正常的运算顺序。

{{{
7> (50 * 100) - 4999.
1
8> -(50 * 100 - 4999).
-1
9> -50 * (100 - 4999).
244950
}}}
如果你需要表达十进制之外的整数，只要输入形如“进制数#值”（进制数在2到36之间）的数字：
{{{
10> 2#101010.
42
11> 8#0677.
447
12> 16#AE.
174
}}}
漂亮！通过一套不可思议的语法，Erlang拥有你桌面角落上那台计算器的能力！#REVIEWME on top of it, 这里的it是什么？#绝对让人兴奋！


不可变的变量

做算术不是问题，但是如果无法保存计算结果，你就不能做太多的事情。为此，我们需要变量。如果你阅读了本书的前言，你应该知道在函数式编程语言中，变量是不能被改变的。变量的基本性质可以通过下面七个表达式来表现（请注意下面的的变量都是以大写字母开头的）：
{{{
1> One.
* 1: variable 'One' is unbound
2> One = 1.
1
3> Un = Uno = One = 1.
1
4> Two = One + One.
2
5> Two = 2.        
2
6> Two = Two + 1.
** exception error: no match of right hand side value 3
7> two = 2.
** exception error: no match of right hand side value 2
}}}

