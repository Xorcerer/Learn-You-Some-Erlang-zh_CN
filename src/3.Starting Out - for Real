# -*- coding: UTF-8 -*-



真正的开始


Erlang是一个相对小而简单的语言（就如C相对于C++而言）。这一章将覆盖大部分Erlang为数不多基础数据类型。强烈建议阅读本章，因为它解释了你日后用Erlang写的所有程序的各个组成部分。


数字

在Erlang的Shell里，表达式需要以后面跟有空格（或者换行、#REVIEWME#）的句号“.”结束，否则他们不会被执行。你可以通过逗号“,”分隔表达式，但是只有最后一句表达式的结果会被显示（在Shell中），虽然其他同样会被执行。这对于大多数人来说，的确是不正常的语法，它源自Erlang还是被Prolog直接实现的日子，后者是一种逻辑编程语言。

以上一章介绍的方式打开Erlang的Shell，让我们开始输入一些东西。

{{{
1> 2 + 15.
17
2> 49 * 100.
4900
3> 1892 - 1472.
420
4> 5 / 2.
2.5
5> 5 div 2.
2
6> 5 rem 2.
1
}}}

你应该发现，Erlang并不在乎你是输入了一个浮点数还是整数：两种类型在算术运算时都被支持。在你的角度看，Erlang的数学运算符能无差别对待的，几乎也只有整数和浮点数了。当然，如果你需要一个“整数到整数”的除法，使用“div”，需要求模运算，使用 rem （remainder的缩写）。

注意，我们可以在同一个表达式里使用多个运算符，数学运算符遵从正常的运算顺序。

{{{
7> (50 * 100) - 4999.
1
8> -(50 * 100 - 4999).
-1
9> -50 * (100 - 4999).
244950
}}}
如果你需要表达十进制之外的整数，只要输入形如“进制数#值”（进制数在2到36之间）的数字：
{{{
10> 2#101010.
42
11> 8#0677.
447
12> 16#AE.
174
}}}
漂亮！通过一套不可思议的语法，Erlang拥有你桌面角落上那台计算器的能力！#REVIEWME on top of it, 这里的it是什么？#绝对让人兴奋！


不可变的变量

做算术不是问题，但是如果无法保存计算结果，你就不能做太多的事情。为此，我们需要变量。如果你阅读了本书的前言，你应该知道在函数式编程语言中，变量是不能被改变的。变量的基本性质可以通过下面七个表达式来表现（请注意下面的变量都是以大写字母开头的）：
{{{
1> One.
* 1: variable 'One' is unbound
2> One = 1.
1
3> Un = Uno = One = 1.
1
4> Two = One + One.
2
5> Two = 2.        
2
6> Two = Two + 1.
** exception error: no match of right hand side value 3
7> two = 2.
** exception error: no match of right hand side value 2
}}}
这些命令告诉我们的第一件事是一个变量只能被赋值一次；在它被赋值之后，你可以“假装”再赋一个同样的值给它。如果第二次赋的值不同，Erlang会抱怨的。上面的观察是正确的，但是对此的解释会复杂一点，并取决于等号“=”运算符。等号“=”运算符（而不是那些变量）拥有比较两个值和“在他们不相等的时候抱怨”的功能。如果两个值相等，它返回该值：
{{{
8> 47 = 45 + 2.
47
9> 47 = 45 + 3.
** exception error: no match of right hand side value 48
}}}
当等号“=”参与运算时，如果左边是一个未绑定（unbound）的变量（即没有被赋值），Erlang会自动把右边运算的结果复制给该变量。而接下来等号两边的比较结果显示是相同，而变量的值也会保留在内存中。
这种等号操作符的行为是’模式匹配‘的基础，后者是很多函数式编程语言拥有的特性，而比起其他语言Erlang在这一点上更有灵活和完善。我们将本章讨论元组（tuple）和列表（list）时看到模式匹配的更多细节，而接下来关于函数的章节也会提及它。
另一样命令1-7告诉我们的是变量名必须以大写字母开头。命令7报错的原因是单词“two”以一个小写开头。技术上说，变量也可以以一个下划线"_"开头，但是按照惯例，这样做仅仅适合于接受你“不需要但仍然希望注明它包含了什么”的赋值。
你也可以使用只有一个下划线的变量：
{{{
10> _ = 14+3.
17
11> _.
* 1: variable '_' is unbound
}}}

注意：如果你在Shell中测试，并且为一个变量赋一个错误的值，那么可以通过函数 f(variable). 来“擦除”这个变量。如果你希望清楚所有的变量名，使用 f(). 。
这些函数仅仅是为了帮助你测试，只能在Shell中使用。当写真正的程序的时候，我们不能通过这种方式删除值。如果你考虑到Erlang在生产环境的应用——完全有可能把一个Shell用上几年而不中断，那么它能在Shell中删除是合理的，我们可以打赌变量x会在这个期间被使用不只一次。

原子

变量名不能以小写字母开头的其中一个原因是原子的存在。原子是以自己名称的字面意思为它的值的常量。你看到的就是你得到的，没有更多内容。原子cat意思是“cat”，就这样。你不可以跟它玩#REVIEWME#（原文：You can't play with it），不可以改变它，也不可以把它分成碎片；它就是cat。
