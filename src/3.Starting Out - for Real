# -*- coding: utf-8 -*-



真正的开始


Erlang是一个相对小而简单的语言（就如C相对于C++而言）。这一章将覆盖大部分Erlang为数不多基础数据类型。强烈建议阅读本章，因为它解释了你日后用Erlang写的所有程序的各个组成部分。


数字

在Erlang的Shell里，表达式需要以后面跟有空格（或者换行、#REVIEWME#）的句号“.”结束，否则他们不会被执行。你可以通过逗号“,”分隔表达式，但是只有最后一句表达式的结果会被显示（在Shell中），虽然其他同样会被执行。这对于大多数人来说，的确是不正常的语法，它源自Erlang还是被Prolog直接实现的日子，后者是一种逻辑编程语言。

以上一章介绍的方式打开Erlang的Shell，让我们开始输入一些东西。

{{{
1> 2 + 15.
17
2> 49 * 100.
4900
3> 1892 - 1472.
420
4> 5 / 2.
2.5
5> 5 div 2.
2
6> 5 rem 2.
1
}}}

你应该发现，Erlang并不在乎你是输入了一个浮点数还是整数：两种类型在算术运算时都被支持。在你的角度看，Erlang的数学运算符能无差别对待的，几乎也只有整数和浮点数了。当然，如果你需要一个“整数到整数”的除法，使用“div”，需要求模运算，使用 rem （remainder的缩写）。

注意，我们可以在同一个表达式里使用多个运算符，数学运算符遵从正常的运算顺序。

{{{
7> (50 * 100) - 4999.
1
8> -(50 * 100 - 4999).
-1
9> -50 * (100 - 4999).
244950
}}}
如果你需要表达十进制之外的整数，只要输入形如“进制数#值”（进制数在2到36之间）的数字：
{{{
10> 2#101010.
42
11> 8#0677.
447
12> 16#AE.
174
}}}
漂亮！通过一套不可思议的语法，Erlang拥有你桌面角落上那台计算器的能力！#REVIEWME on top of it, 这里的it是什么？#绝对让人兴奋！


不可变的变量

做算术不是问题，但是如果无法保存计算结果，你就不能做太多的事情。为此，我们需要变量。如果你阅读了本书的前言，你应该知道在函数式编程语言中，变量是不能被改变的。变量的基本性质可以通过下面七个表达式来表现（请注意下面的变量都是以大写字母开头的）：
{{{
1> One.
* 1: variable 'One' is unbound
2> One = 1.
1
3> Un = Uno = One = 1.
1
4> Two = One + One.
2
5> Two = 2.        
2
6> Two = Two + 1.
** exception error: no match of right hand side value 3
7> two = 2.
** exception error: no match of right hand side value 2
}}}
这些命令告诉我们的第一件事是一个变量只能被赋值一次；在它被赋值之后，你可以“假装”再赋一个同样的值给它。如果第二次赋的值不同，Erlang会抱怨的。上面的观察是正确的，但是对此的解释会复杂一点，并取决于等号“=”运算符。等号“=”运算符（而不是那些变量）拥有比较两个值和“在他们不相等的时候抱怨”的功能。如果两个值相等，它返回该值：
{{{
8> 47 = 45 + 2.
47
9> 47 = 45 + 3.
** exception error: no match of right hand side value 48
}}}
当等号“=”参与运算时，如果左边是一个未绑定（unbound）的变量（即没有被赋值），Erlang会自动把右边运算的结果复制给该变量。而接下来等号两边的比较结果显示是相同，而变量的值也会保留在内存中。
这种等号操作符的行为是’模式匹配‘的基础，后者是很多函数式编程语言拥有的特性，而比起其他语言Erlang在这一点上更有灵活和完善。我们将本章讨论元组（tuple）和列表（list）时看到模式匹配的更多细节，而接下来关于函数的章节也会提及它。
另一样命令1-7告诉我们的是变量名必须以大写字母开头。命令7报错的原因是单词“two”以一个小写开头。技术上说，变量也可以以一个下划线"_"开头，但是按照惯例，这样做仅仅适合于接受你“不需要但仍然希望注明它包含了什么”的赋值。
你也可以使用只有一个下划线的变量：
{{{
10> _ = 14+3.
17
11> _.
* 1: variable '_' is unbound
}}}

注意：如果你在Shell中测试，并且为一个变量赋一个错误的值，那么可以通过函数 f(variable). 来“擦除”这个变量。如果你希望清楚所有的变量名，使用 f(). 。
这些函数仅仅是为了帮助你测试，只能在Shell中使用。当写真正的程序的时候，我们不能通过这种方式删除值。如果你考虑到Erlang在生产环境的应用——完全有可能把一个Shell用上几年而不中断，那么它能在Shell中删除是合理的，我们可以打赌变量x会在这个期间被使用不只一次。


原子

变量名不能以小写字母开头的其中一个原因是原子的存在。原子是以自己名称的字面意思为它的值的常量。你看到的就是你得到的，没有更多内容。原子cat意思是“cat”，就这样。你不可以跟它玩#REVIEWME#（原文：You can't play with it），不可以改变它，也不可以把它分成碎片；它就是cat。
除了单个单词以小写字母开头写atom之外，我们还有别的方式：
{{{
1> atom.
atom
2> atoms_rule.
atoms_rule
3> atoms_rule@erlang.
atoms_rule@erlang
4> 'Atoms can be cheated!'.
'Atoms can be cheated!'
5> atom = 'atom'.
atom
}}}
一个atom应该被单引号(')包围，如果它不是以小写字母开头或者包含了字母、数字、下划线(_)或者@之外的字符。
表达式5还表明了，一个被单引号包围的atom与把单引号去掉之后的部分是同一个原子。

我把原子以它们的名字为值的常量。你以前可能接触过使用常量的代码：举个例子，我需要为每种瞳孔的颜色绑定一个值：BLUE -> 1, BROWN -> 2, GREEN -> 3, OTHER -> 4（译者：也许白人中黑色的瞳孔的比例很小）。你需要去匹配一个常量和它指代的值。原子让你抛开那些指代的值：我定义的瞳孔颜色只是简单的 blue，brown，green和other。这些颜色可以在任意代码中使用：它们指代的值永远不会有冲突，并且也不会出现变量未定义的情况！如果你真的需要有其赋值的常量，有办法可以做，我们将在[/chapter4 chapter 4（模块）]中讨论。

因此，一个原子主要用于表达或者修饰#REVIEWME#与之相连的数据。原子很难被单独使用，这就是我们没有花更多的时间讨论它的原因，它们只有在结合其他数据类型的时候，才能体现最大的价值。


不要喝太多的苦艾酒（不要想得太完美）

原子是非常适用于发送信息和表达常量。但是过度使用原子将有隐患：一个原子会被一张“原子表”引用，这导致内存上的开销（在32位系统中是每原子4字节，在64位系统中是每原子8字节）。原子表是不会被垃圾回收，所以原子会一直存在直到超过系统的限制——内存耗尽或者定义了超过1048577个原子。

这意味着不管什么原因，原子不应该动态地生成，如果你的系统需要稳定，但用户的输入导致新的原子不断生成从而导致系统崩溃，你就有大麻烦了。原子对于程序员来说应该被视为工具，坦白说，这就是原子的意义所在。


注意：一些原子是保留字，不能在语言设计者的意愿之外被使用：函数名，操作符，表达式等。它们是：after, and, andalso, band, begin, bnot, bor, bsl, bsr, bxor, case, catch, cond, div, end, fun, if, let, not, of, or, orelse, query, receive, rem, try, when, xor.


布尔代数和比较运算符

一个人会遇到麻烦如果他无法表达什么是小，什么是大，什么是真，什么是假。正如其他语言，Erlang 也让你可以使用 布尔操作和让事物做比较。

布尔单数非常简单：
{{{
1> true and false.
false
2> false or true.
true
3> true xor false.
true
4> not false.
true
5> not (true and true).
false
}}}


注意：布尔运算符 and 和 or 将总会计算运算符左右两边的参数（表达式）。如果你需要短路操作（只有在需要的时候，才会计算右边的参数），使用 andalso 和 orelse。

检查相等或者不相等也非常简单，但是跟你在其他语言里看到的符号略有不同：
{{{
6> 5 =:= 5.
true
7> 1 =:= 0.
false
8> 1 =/= 0.
true
9> 5 =:= 5.0.
false
10> 5 == 5.0.
true
11> 5 /= 5.0.
false
}}}

首先，你习惯的语言使用 == 和 != 来检查相等和不相等的情况，Erlang 使用 =:= 和 =/= 。最后三个表达式（第9到11行）也给我们介绍了一些潜在的细节：在做算术时，Erlang 不会关心浮点类型和整形的区别，但是在进行比较的时候会。别担心，因为 == 和 /= 运算符在这些情况（需要忽略比较对象的类型）下会帮到你。请注意你是否需要精确比较相等或者不等。

其他用于比较的运算符是 < （小于）， > （大于）， >=（大于或等于）和 =< （小于或等于）。最后一个是向前兼容的需要（在我看来），它是我源码中多处语法错误的根源。请多留心 =<。
{{{
12> 1 < 2.
true
13> 1 < 1.
false
14> 1 >= 1.
true
15> 1 =< 1.
true
}}}

如果做 5 + llama 或者 5 == true 会怎么样呢？没有什么比直接实验然后等错误信息回答你更好的办法了。
{{{
12> 5 + llama.
** exception error: bad argument in an arithmetic expression
    in operator  +/2
        called as 5 + llama
}}}
噢！Erlang 并不喜欢你这样滥用它的基础类型！模拟器会返回一个漂亮的错误信息。它告诉我们它不喜欢 + 号两边的参数的其中一个。

Erlang 并不会每次都被你弄疯掉：
{{{
13> 5 =:= true.
false
}}}
为什么它在某些运算上拒绝不同的类型，但是某些又不行呢？Erlang 不允许你随意地把两个事物相加，但是它允许你比较它们。这时因为 Erlang 的创造者们认为实用高于理论，并且倾向于可以简单的编写诸如通用的可以让任何事物有序的排序算法。它的存在就是为了在绝大多数时间里能简化你的生活。

最后一样需要注意的是，当做布尔运算和比较时：
{{{
14> 0 == false.
false
15> 1 < false.
true
}}}
也许你会抓狂，如果你来自过程式语言或者大多数面向对象语言。第14行的结果应该是 true 而15行应该是 false！因为，false 意味着0，而 true 意味着非0的任何东西！除了 Erlang。因为我骗了你。是的，我骗了你，我感到惭愧。

Erlang 并没有真正的布尔值 true 和 false。这两个对象仅仅是两个原子，只是它们在跟语言结合得很好，你在使用它们的时候不会遇到麻烦，除非你期待它们表示 false 和 true 字面意思以外的内容。

注意：在比较运算中正确的顺序是：
    number < atom < reference < fun < port < pid < tuple < list < bit string
    你还并不了解上述的所有类型，但是你将通过阅读本书了解它们。只要记得这就是为什么你可以拿任意两个对象作比较！引用 Joe Armstrong，Erlang 的创造者之一的话：“真正的顺序并不重要 —— 但是重要的是定义了一个全局的顺序。”


元组

元组是组织数据的方式之一。它是把确定数目的对象组织起来的一种方式。在 Erlang，一个元组写法是： {{{ {Element1, Element2, ..., ElementN} }}}。例如，你给我一个坐标(x,y)用于表示一个点在平面直角坐标系上的位置。我们可以通过一个两个对象的元组来表示这个点：
{{{
1> X = 10, Y = 4.
4
2> Point = {X,Y}.
{10,4}
}}}
在这里，一个点永远由两个对象表示。与其在各处都同时使用变量X和Y，你现在只需要使用一个。那么，如果我得到一个点坐标并只需要X的位置呢？提取其中的信息并不难。回忆一下我们为变量赋值，如果你多次给一个变量赋予同样的值，Erlang是不会抱怨的。让我们利用这一点！你也许需要用{{{ f() }}}清理已经赋值过的变量。
{{{
3> Point = {4,5}.
{4,5}
4> {X,Y} = Point.
{4,5}
5> X.
4
6> {X,_} = Point.
{4,5}
}}}
然后我们就可以通过X来获得元组的第一个值了！这是怎么做到的呢？首先，X和Y没有被赋值，所以被认为是“未绑定的变量”。当我们把它们放入元组 {X, Y} ，并放在运算符 = 的左手边时，运算符 = 会比较两边的值：{X, Y} 与 {4, 5}。 Erlang 会聪明到把右边元组内的值解包，并分发给左边元组的未赋值变量。所以，最后的比较操作仅仅是{{{ {4, 5} = {4, 5} }}}，即总会相等！这是众多模式匹配中的一种。

注意第六条表达式，我使用了匿名变量“_”。这正是它的用途所在：丢弃所赋的值，因为我们不需要它。变量“_”总是被视为“未绑定的变量”，并在模式匹配中表现得像一个通配符。模式匹配在解包元组时，元组的元素数（元组的长度）必须相等。
{{{
7> {_,_} = {4,5}.
{4,5}
8> {_,_} = {4,5,6}.
** exception error: no match of right hand side value {4,5,6}
}}}
元组还可以用于单个值。例如？最简单的例子是气温：
{{{
9> Temperature = 23.213.
23.213
}}}
哈，似乎是一个适合去海边沙滩的日子...等等，这是大连，厦门还是海口的天气呢？#Xorcerer：我在此把城市例子改为国内的城市了#
{{{
10> PreciseTemperature = {beijing, 23.213}.
{beijing,23.213}
11> {xiamen, T} = PreciseTemperature.
** exception error: no match of right hand side value {xiamen,23.213}
}}}
这会抛出错误，但这正是我们要的！这是，再一次强调，模式匹配在起作用。运算符“=”最终会比较{xiamen, T}和{celsius, 23213}：即使变量T是未绑定的，Erlang 不会在比较的时候把原子 beijing 和 xiamen 认为是相等的。异常会抛出，导致代码中止执行。通过这样做，我们程序在这里希望得到厦门的气温，不会接受来自北京的气温信息。这让程序员简单地知道什么被传递了进来，并且也利于调试。一个包含一个原子并有一个元素紧随其后的元组，被称为“带标签的元组(tagged tuple)”。元组中的任何元素都可以任意类型，甚至可以是另一个元组：
{{{
12> {point, {X,Y}}.
{point,{4,5}}
}}}
如果我们需要传递超过一个点的坐标呢？


列表！

列表是很多函数式编程语言的面包和黄油（译者：常用的意思）。它们用于解决所有类型的问题，无疑也是 Erlang 最常用的数据结构。列表可以包含任何东西！数字、原子、元组、其他列表；你最狂野的梦想都在这个单一的结构内。最基本点列表记号是{{{ [Element1, Element2, ..., ElementN] }}}并且你可以放入超过一种数据类型：
{{{
1> [1, 2, 3, {numbers,[4,5,6]}, 5.34, atom].
[1,2,3,{numbers,[4,5,6]},5.34,atom]
}}}
足够简单吧？
{{{
2> [97, 98, 99].
"abc"
}}}
噢，不！这是 Erlang 里最讨厌点事情之一：字符串！字符串也是列表，并且标记也完全一致！为什么大家讨厌它呢？因为：
{{{
3> [97,98,99,4,5,6].
[97,98,99,4,5,6]
4> [233].
"é"
}}}
Erlang 只有在列表中至少有一个数字无法用字母表达时，才会以数字的形式打印列表！Erlang里没有真正字符串的概念！这无疑将时常让你苦恼，而你会因此讨厌这门语言。不要绝望，因为有别的方法可以表达字符串，我们将在本章稍后接触到。

不要喝太多苦艾酒
这就是为什么你会听到Erlang处理字符串非常糟糕：它没有像大多数其他语言那样，内置的字符串类型。这是因为Erlang最早是电信公司设计和使用一种语言。他们几乎不适用字符串，因此也不觉得应该增加对字符串的内置支持。但是Erlang在字符串处理上的弱项，随着时间的推移正得到补全：它的虚拟机已经原生支持Unicode字符串，并因此在字符串处理上变得更快了。

另还有一种保存字符串的方式——作为二进制数据，使它们能被非常快速地处理。总体而言，核心库还是缺少一些相关的函数，但用Erlang处理字符串还是可行的。而如果需要大量处理字符串，那么某些语言可能更适合，比如Perl和Python。

要把列表连在一起，我们使用`++`操作符。`++`的反向操作是`--`，从列表中删除元素：

    5> [1,2,3] ++ [4,5].
    [1,2,3,4,5]
    6> [1,2,3,4,5] -- [1,2,3].
    [4,5]
    7> [2,4,2] -- [2,4].
    [2]
    8> [2,4,2] -- [2,4,2].
    []

`++`和`--`都是右结合的。这意味着数个相连的`--`或者`++`的操作将从右向左被执行，如下例：

    9> [1,2,3] -- [1,2] -- [3].
    [3]
    10> [1,2,3] -- [1,2] -- [2].
    [2,3]

继续往下。列表的第一个元素叫头（Head），剩下的元素组成的列表叫尾（Tail）。我们可以使用两个内置函数(built-in functions，简写成BIF)来得到他们。

    11> hd([1,2,3,4]).
    1
    12> tl([1,2,3,4]).
    [2,3,4]


注意：内置函数（BIFs)通常是一些无法用纯Erlang实现的函数，因此会由C或者其他实现了当前Erlang的语言（如80年代，Prolog实现了Erlang）来定义。也有些内置函数可以通过Erlang实现，但是出于性能考虑而在C上实现。其中一个例子是`length(List)`函数，它将返回（你已经猜到了）作为参数传入的列表的长度。

读取或者增加列表的头是非常高效的：事实上所有关于列表的应用，你都会从头开始。由于它使用得如此频繁，通过模式匹配我们可以漂亮地把头从列表的尾独立出来：`[Head|Tail]`。这也是你把新头增加到列表的方式：

    13> List = [2,3,4].
    [2,3,4]
    14> NewList = [1|List].
    [1,2,3,4]

在处理列表的时候，正如你会从头开始，你也需要便捷地保存尾，以便后面的操作。如果你还记得元组工作的方式，记得我们如何用模式匹配去解包一个点(`{X, Y}`)内的值，那么你会知道我们可以通过类似的方式把第一个元素（头）从列表中去掉。

    15> [Head|Tail] = NewList.
    [1,2,3,4]
    16> Head.
    1
    17> Tail.
    [2,3,4]
    18> [NewHead|NewTail] = Tail.
    [2,3,4]
    19> NewHead.
    2

运算符`|`被称为cons运算符（单词constructor（构造器）的前4个字符）。事实上，任何列表都可以通过cons和值构成：

    20> [1 | []].
    [1]
    21> [2 | [1 | []]].
    [2,1]
    22> [3 | [2 | [1 | []] ] ].
    [3,2,1]

这就是说，任何列表都是可以表达为：`[Term1| [Term2 | [... | [TermN]]]]`。列表因此可以递归地看作一个头和剩下的尾的组合，也就是一个头，后面跟着更多的头。在一点上，我们可以把一个列表想象成蚯蚓：你可以切下它的一半，然后就看见两条蚯蚓了。

构建Erlang列表的方式有时候会让不熟悉构造器（contructor）的人感到困惑。为了帮助你更快的掌握这个概念，请看下面的例子（提示：他们都是等价的）：

    [a, b, c, d]
    [a, b, c, d | []]
    [a, b | [c, d]]
    [a, b | [c | [d]]]
    [a | [b | [c | [d]]]]
    [a | [b | [c | [d | [] ]]]]

明白这一点，你已经可以开始列表解析了。

注意：使用如`[1 | 2]`的格式会得到"错误的列表"。错误列表会在模式匹配`[Head|Tail]`时工作正常，但是会在用于某些Erlang标准函数（内置函数）时出错（包括 `length()`)。因为Erlang期待“正确的列表”。正确的列表的最后一个元素为一个空列表。当我们定义一个对象如 `[2]`，列表将自动生成正确的结构。类似地，`[1|[2]]`也是正确的！错误的列表，虽然符合语法，但是在用户定义的数据结构之外，没有太多的意义。


列表解析


列表解析是构建和修改列表的方式。比起其他操作列表的方式，它也会让程序更短和更易读。灵感来源于集合的标记；如果你上过关于集合的数学课，或者度过关于数学标记的书，你也许会知道它们的意义。集合标记主要告诉你的是，如果通过设置一些其成员必须满足的条件，去构建一个集合。列表解析也许入门比较难，但是值得我们去努力。它会让你的代码变得简短，所以不要犹豫，多尝试多练习直到掌握它。

一个集合标记的例子是 ![所有与自身的平方相等的实数](/images/set-comprehension.png)。这个集合标记告诉你，你得到的结果是所有跟它自身的平方相等的实数。而这个集合是`{0, 1}`。另一个集合标记的例子，简写成 `{x : x > 0}`。这里，我们需要所有大于 0 的数字。

列表解析在Erlang里用于从一个集合得到另一个集合。给出一个集合 `{2n : n in L}`，其中 L 是列表 `[1, 2, 3, 4]`，Erlang的实现是：

    1> [2*N || N <- [1,2,3,4]].
    [2,4,6,8]

把Erlang的版本与原来的数学标记做比较，并没有太多的不同：花括号`{}`变成方括号`[]`，冒号`:`变成两个管道标记`||`（译者：原文是two pipes，名称出自Unix系统，`|`这个符号用于Unix系统的管道功能）而单词 in 变成箭头 `<-`。我们只是改变了符号，但保留了逻辑。在上面这个例子，`[1, 2, 3, 4]`的每一个值都会被顺序地模式匹配成N，那个箭头就如`=`运算符，除了它不会抛出异常之外（译者：因为一个变量只能被赋值一次）。

你还可以通过返回布尔值的操作，为一个列表解析加入约束。如果我们需要1到10之间所有的偶数，我们可以写：

    2> [X || X <- [1,2,3,4,5,6,7,8,9,10], X rem 2 =:= 0].
    [2,4,6,8,10]

`X rem 2 =:= 0` 会检查一个数是否为偶数。实际应用如，当我们需要把列表中每一个元素分别代入一个函数，使（译者：返回的）一个列表符合约束，等等。假设我们有一家餐厅。一个顾客进来，看我们的菜单并询问是否可以列出所有价格在3到10元的菜，并在此之后显示税后（假设7%，美国政策）的价格。

    3> RestaurantMenu = [{steak, 5.99}, {beer, 3.99}, {poutine, 3.50}, {kitten, 20.99}, {water, 0.00}].
    [{steak,5.99},
     {beer,3.99},
     {poutine,3.5},
     {kitten,20.99},
     {water,0.0}]
    4> [{Item, Price*1.07} || {Item, Price} <- RestaurantMenu, Price >= 3, Price =< 10].
    [{steak,6.409300000000001},{beer,4.2693},{poutine,3.745}]

当然，上面的数字并没有截取到一个适合阅读的格式，但是这例子已经达到目的了。Erlang列表解析的格式就是 `NewList = [Expression || Pattern <- List, Condition1, Condition2, ... ConditionN]`. 其中 `Pattern <- List`是一个产生器(原文： Generator)表达式。你可以拥有不止一个！

    5> [X+Y || X <- [1,2], Y <- [2,3]].
    [3,4,4,5]

这将进行运算 `1+2`，`1+3`，`2+2`，2+3。所以如果你需要更通用的列表解析格式，你已经猜到了： `NewList = [Expression || GeneratorExp1, GeneratorExp2, ..., GeneratorExpN, Condition1, Condition2, ... ConditionM]`。主意产生器表达式和模式匹配一起使用，将得到过滤器的效果：

    6> Weather = [{toronto, rain}, {montreal, storms}, {london, fog},  
    6>            {paris, sun}, {boston, fog}, {vancouver, snow}].
    [{toronto,rain},
     {montreal,storms},
     {london,fog},
     {paris,sun},
     {boston,fog},
     {vancouver,snow}]
    7> FoggyPlaces = [X || {X, fog} <- Weather].
    [london,boston]

如果天气列表中的某个元素不匹配`{X, fog}`这模式，它将在列表解析过程中被忽略，而不是如`=`运算符那样抛出一个异常。

现在我们只剩下一种基本数据类型供考察了。这是一个让人惊喜的特性，它让处理二进制数据变得跟吃馅饼一样简单#REVIEWME#。


Bit语法!

大多数语言支持处理如数字，原子，元组，列表，记录和结构之类的数据。它们中的多数只有非常原始的工具去处理二进制数据。Erlang 把模式匹配提升到一个新的境界，并以此提供独特实用的处理二进制数据的抽象。它让处理原始二进制数据变得有趣和简单（实际上只是凑合），这对于它最初的任务——通信应用而言是必要的。二进制处理拥有独特的语法和习惯，这初看起来有点奇怪，但如果你了解bit和byte特性，那么这些对你而言都不是问题。*否则，也许你应该跳过本章剩下的部分*。

Bit语法把二进制数据放在 << 和 >> 之间，通过逗号把它切分成方便阅读的段（segment）。每一段都是二进制数据中的一个bit序列（没必要按照byte的倍数切分，虽然这是默认做法）。例如我们需要保存真彩色（24 bits）的橙色的像素。如果看过Photoshop或者Web的CSS风格表中的颜色，你一定知道十六进制的表示法格式如 `#RRGGBB` 。这种格式表达橙色是 `#F09A29`，在Erlang中可以写作：

    1> Color = 16#F09A29.
    15768105
    2> Pixel = <<Color:24>>.
    <<240,154,41>>

上述代码说 “把24位的二进制数据 #F09A29 （红，绿，黄各占8位）赋值给变量 Pixel。” 这个值可在后面被写入一个文件。这看起来并不多，但是一旦写入文件，然后用一个文本编辑器打开，你将看到一些无法直接阅读的字符。当你重新读入这个文件（通过 Erlang），Erlang 会再次解析这个文件为工整的 `<<240,151,41>>` 格式！

更有趣的是，我们可以通过模式匹配去解包内容：

    3> Pixels = <<213,45,132,64,76,32,76,0,0,234,32,15>>.
    <<213,45,132,64,76,32,76,0,0,234,32,15>>
    4> <<Pix1,Pix2,Pix3,Pix4>> = Pixels.
    ** exception error: no match of right hand side value <<213,45,132,64,76,32,76,
    0,0,234,32,15>>
    5> <<Pix1:24, Pix2:24, Pix3:24, Pix4:24>> = Pixels.
    <<213,45,132,64,76,32,76,0,0,234,32,15>>

我们在命令3所声明恰好是四个像素的RGB颜色的二进制值。在表达式4，我们尝试把二进制内容解包为四个值。它抛出了一个异常，因为我们有不止4个段，事实上，我们有12个！所以我们应该做的是告诉 Erlang 左侧每一个变量将保存24位的数据。这就是 `Var:24` 的意义。接下来我们可以解包第一个像素为一组单色值：

    6> <<R:8, G:8, B:8>> = <<Pix1:24>>.
    <<213,45,132>>
    7> R.
    213

“很好。那么如果我只需要第一个颜色怎么办？我需要把所有这些值都解包吗？” 哈！别担心！ Erlang 引入了更多的语法糖和模式匹配来帮助你：

    8> <<R:8, Rest/binary>> = Pixels.
    <<213,45,132,64,76,32,76,0,0,234,32,15>>
    9> R.
    213

漂亮，不是吗？这是因为 Erlang 允许尝过一种方式来描述二进制段。下面的方式都是合法的：

    Value
    Value:Size
    Value/TypeSpecifierList
    Value:Size/TypeSpecifierList

上面的Size总是bit位数，TypeSpecifierList会是下面一个或者多个：

    类型（Type）
    候选值: integer | float | binary | bytes | bitstring | bits | utf8 | utf16 | utf32
    这个反映了二进制数据的用途。注意 bytes 是 binary 的缩写，bits 是 bitstring 的缩写。如果没有指定类型，Erlang 默认为 integer。

    符号（Signedness）
    候选值: signed | unsigned
    仅仅在匹配类型为 integer 时，才有意义。默认为 unsigned。

    字节序（Endianness）
    候选值: big | little | native
    字节序仅仅在类型为 integer，utf16，utf32 或者 float 时有意义。这关系到系统读取二进制数据的方式。例如，BMP图片头部格式以占用4个byte的 integer 保存了该文件的大小。一个大小为72 bytes的文件，在小端序的系统会表示为 `<<72,0,0,0>>` 而在大端序则为 `<<0,0,0,72>>`。其中一个将被读作'72'，而另一个将被读作'1207959552'，所以请确认你使用了正确的字节序。这里有一个选项为`native`，它将在运行时根据CPU的实际情况作出选择。字节序的默认值为`big`。

    单位（Unit）
    写作 unit:Integer
    这是每个段单位长度，以bit记。允许的范围时 1..256。整数（integer）、浮点（float）和bit串（bitstring）的默认长度为1，二进制值（binary）的默认长度为8。utf8，utf16 和 utf32类型不需要定义单位。大小乘以单位的积等价于这个段要占用的bit数，必须可以被8整除。单位长度通常用于保证字节对齐（byte-alignment）。

TypeSpecifierList 由以'-'连接的上述属性组成。

下面的例子有助于理解定义：


    10> <<X1/unsigned>> =  <<-44>>.
    <<"Ô">>
    11> X1.
    212
    12> <<X2/signed>> =  <<-44>>. 
    <<"Ô">>
    13> X2.
    -44
    14> <<X2/integer-signed-little>> =  <<-44>>.
    <<"Ô">>
    15> X2.
    -44
    16> <<N:8/unit:1>> = <<72>>.
    <<"H">>
    17> N.
    72
    18> <<N/integer>> = <<72>>.
    <<"H">>
    19> <<Y:4/little-unit:8>> = <<72,0,0,0>>.     
    <<72,0,0,0>>
    20> Y.
    72

你可以看到读，存和解析二进制数据，都不止一种方法。这也许有一点混乱，但是总比其他语言给出的处理方式要直观得多。

标准的二进制操作（左移或者右移bit位，二进制的'and'，'or'，'xor'，或'not'）同样存在于 Erlang 中。只要使用函数 `bsl` （bit左移），`bsr`（bit右移），`band`，`bor`，`bxor`，和`bnot`。

    2#00100 = 2#00010 bsl 1.
    2#00001 = 2#00010 bsr 1.
    2#10101 = 2#10001 bor 2#00101.

在上述标记和bit语法的帮助下，解析和模式匹配二进制数据易如反掌。我们可以通过下面代码解析TCP段：

    <<SourcePort:16, DestinationPort:16,
      AckNumber:32,
      DataOffset:4, _Reserved:4, Flags:8, WindowSize:16,
      CheckSum: 16, UrgentPointer:16,
      Payload/binary>> = SomeBinary.

同样的逻辑可以用于任何二进制：视频解码，图片，其他协议的实现，等。


不要喝太多苦艾酒

比起C或者C++，Erlang执行速度较慢。除非你是一个有耐心的人，否则用它转换视频或者图片绝不是好主意，即使我提到的上述进制语法让它做这种事情非常有趣。Erlang只是不太适合用于大量的数字运算。

应该注意到，对于不需要过多数字运算的应用，Erlang还是很快的：对事件作出响应，消息传递（在原子的帮助下，这相当轻量级），等。它可以在毫秒级时间内处理事件，是软实时应用的不错选择。

二进制标记的另一个重要用途是：bit字符串（译者：又名二进制字符串，作者混用这两个名词）。二进制字符串在这个语言里与列表拥有同等的地位#REVIEW#，它们在空间利用上有优势。这是因为普通列表是链表（每个字母占1个“节点”）而bit字符串则更像是C语言的数组。Bit字符串使用标记`<<"this is a bit string!">>`。比起列表，它的缺点是在做模式匹配或者操作时，会有点麻烦。因此，人们会在存储不经常操作而需要考虑空间效率的文本时，使用二进制字符串。


注意：即使bit字符串比较轻量级，你还是应该避免使用它们去表示值。也许把它用于字面量是很有吸引力的选择`{<<"temperature">>,50}`，但是这种情况下还是请使用原子。正如本章前面所述，原子实际上只占用4或8个字节，无所谓它字面有多长。使用它们，你将在函数与函数之间或者在不同服务器上的Erlang节点之间传递数据时，开销最小。

相反，不要因为原子更轻量而用它取代字符串。字符串可以被操作（切分，正则处理等），而原子除了（相互之间）做比较之外，别无用处。



二进制领悟（Binary Comprehensions）

二进制领悟之于二进制正如列表领域之于列表：一直让代码更简单明了的方式。它们在 Erlang 的世界里是个相对新的概念，因为他们虽然在前一个版本的 Erlang 就出现了，但是需要一个实现它的模块在编译时设置一个特殊编译标志。从 R13B 版本（我们正在谈论的这个）开始，二进制领悟变成了标准，可以在包括 shell 在内的任何地方使用。

    1> [ X || <<X>> <= <<1,2,3,4,5>>, X rem 2 == 0].    
    [2,4]

与列表解析相比，语法上唯一的不同是`<-`变成`<=`和使用二进制符号`<<>>`代替列表符号`[]`。在前面一节里，我们看过一个从一个包换多个像素的值通过模式匹配获取每一个红绿黄三色的值的例子。这个例子本身挺好，但是在更大的结构里，这种方式会变得难以阅读和维护。同样的工作可以通过一行二进制领悟去完成，而且更加清晰：

    2> Pixels = <<213,45,132,64,76,32,76,0,0,234,32,15>>.
    <<213,45,132,64,76,32,76,0,0,234,32,15>>
    3> RGB = [ {R,G,B} || <<R:8,G:8,B:8>> <= Pixels ].
    [{213,45,132},{64,76,32},{76,0,0},{234,32,15}]

把`<-`改为`<=`可以让我们使用一个二进制流作为产生器。上面整个二进制领悟的意义是把二进制数据转换成整数放入元组中。而下面的二进制领悟语法让你做相反的事情：

    4> << <<R:8, G:8, B:8>> ||  {R,G,B} <- RGB >>.
    <<213,45,132,64,76,32,76,0,0,234,32,15>>

请注意，上面每个元素中得到的二进制数据都需要清晰地定义长度：

    5> << <<Bin>> || Bin <- [<<3,7,5,4,7>>] >>.
    ** exception error: bad argument
    6> << <<Bin/binary>> || Bin <- [<<3,7,5,4,7>>] >>. 
    <<3,7,5,4,7>>

也可以把二进制产生器用于二进制领悟，如上面例子一样，同样需要确定的长度。

    7> << <<(X+1)/integer>> || <<X>> <= <<3,7,5,4,7>> >>.
    <<4,8,6,5,8>>


注意：在写下本文的时候，二进制领悟很少被使用，并且文档欠缺。所以我决定在介绍它们的基本原理之后不再深入。希望了解更多关于二进制语法的信息，请参阅 [white paper defining their specification](http://user.it.uu.se/~pergu/papers/erlang05.pdf)。


