# -*- coding: UTF-8 -*-



开始


Shell

在Erlang里，你可以在模拟器中测试大部分你的工作；它会运行你所有编译和部署之后的脚本，但它也给你实时修改脚本的自由。要在Linux下启动shell，打开终端，然后输入
{{{
$ erl
}}}
如果你的设置都没问题，那么你应该会看到下面的内容：
{{{
Erlang R13B01 (erts-5.7.2) [source] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]
 
Eshell V5.7.2  (abort with ^G)
}}}
祝贺你，你已经在运行Erlang的shell了。

对于Windows用户，你也可以运行erl.exe shell，但是建议你使用werl.exe，后者在开始菜单里可以找到（程序 > Erlang）。Werl是一个仅针对Windows的Erlang shell的实现，拥有独立的带滚动条的窗口，并支持命令行的编辑功能（如复制粘贴，在Windows自带的cmd.exe里这种操作并不友好）。当你需要转发标准输入或标准输出，又或是使用管道时，erl shell仍然有用。

我们已经可以在模拟器中输入和运行代码了，但在此之前，让我们看看如何玩转它。


Shell 命令

Erlang的Shell有一个内置的基于Emacs一个子集的行编辑器（Emacs是一个大众化的文本编辑器，始于70年代）。如果你懂Emacs就最好了，否则，也不会有问题。

首先，如果你输入一些文字，然后按下^A (Ctrl+A)，你将看到光标移动到了行首。^E (Ctrl+E)会让它移动到行尾。你可以使用方向键前后移动光标，或者显示#REVIEW ME 上溯？遍历？#前面输入过的行以重复执行代码。

如果你输入一些文字，如"li"，然后按下"Tab"键，Shell会帮你自动补全为"lists:"，再次按下"Tab"键，Shell会给出你（在"list:"）之后可用的函数。这就是Erlang Shell的模块名自动补全和方法提示。你也许会觉得某些标记有点奇怪，但是你将很快熟悉它们。

我想我们已经学会了基本的Shell功能了，除了不知道怎么退出！有一个方法可以快速地找到答案。只要输入"Help()."，你将看到一系列Shell命令的信息。我们之后将用到其中的一部分，而能让我们退出Shell的，只有
{{{
q() -- quit - shorthand for init:stop()
}}}

