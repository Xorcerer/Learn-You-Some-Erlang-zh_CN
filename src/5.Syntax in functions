# -*- coding: utf-8 -*-



函数的语法


模式匹配

现在我们已学会保存和编译代码，可以开始写一些更高级的函数。我们之前写过的哪些都过于简单。我们将做一些更有趣的事情。第一个将要写的函数需要区别对待不同的性别。对于大多数语言，你需要写一些类似下面的代码:

    function greet(Gender,Name)
        if Gender == male then
            print("Hello, Mr. %s!", Name)
        else if Gender == female then
            print("Hello, Mrs. %s!", Name)
        else
            print("Hello, %s!", Name)
    end

通过模式匹配，Erlang避免了你去写冗长的代码。一个相似的函数在Erlang是：

    greet(male, Name) ->
        io:format("Hello, Mr. ~s!", [Name]);
    greet(female, Name) ->
        io:format("Hello, Mrs. ~s!", [Name]);
    greet(_, Name) ->
        io:format("Hello, ~s!", [Name]).

我承认Erlang的打印函数比起其他语言的版本丑陋很多，但是这不是重点。这里主要的区别是我们使用模式匹配去定义我们需要使用函数的哪一个分支，把需要的值赋予变量上，两者是同时完成的。这里没有必要先给变量赋值，再比较它们。所以比起:

    function(Args)
       if X then
          Expression
       else if Y then
          Expression
       else
          Expression

我们写成：

    function(X) ->
      Expression;
    function(Y) ->
      Expression;
    function(_) ->
      Expression.

将得到相似的结果，但是更符合声明式的风格。这些函数声明中的任意一个都被称为一个函数子句（a function clause）。函数子句必须用分号`;`分割，放在一起构成函数声明。一个函数声明会被整体当作一句更大的表达式，这就是为什么最后一个函数子句以句号结尾。使用这些标点去定义流程也许有点奇怪#REVIEWME#，但你会习惯的。至少你应该期待这样（你将会习惯这种方式）因为我们别无选择。


注意:  `io:format`是通过替换字符串中的记号(token)为指定的值来完成格式化的。字符`~`是用来表示记号的开始。一些记号是内置的，比如 `~n`，将会被替换成换行符。大多数其他记号指定一种格式化数据的方式。函数调用 `io:format("~s!~n",["Hello"]).`包含了记号`~s`和`~n`，前者接受字符串或者比特字符串(bitstring)作为参数。最终的输出信息是`"Hello!\n"`。另一个被广泛使用的记号为`~p`，它会以合理的方式输出一个Erlang的对象(加入缩进或者其他东西)。

`io:format`函数与输入/输出相关的内容将在后面的章节被更深入地介绍，而现在，你可以尝试下面的调用去理解它们的行为: `io:format("~s~n",[<<"Hello">>])`，`io:format("~p~n",[<<"Hello">>])`，`io:format("~~~~n")`，`io:format("~f~n", [4.0])`，`io:format("~30f~n", [4.0])`。这些只是所有可能的输出组合中的一小部分，总之，它们看起来有点像其他语言的`printf`。如果你迫不及待地想知道更多，请阅读[在线文档](http://erlang.org/doc/man/io.html#format-3)。


函数里的模式匹配可以更加复杂和强大。也许你可能记得我们前面提到，我们可以通过模式匹配获得列表的头和尾。让我们试试看!开始一个新的模块，叫 `functions`，我们将在它里写一堆函数来探索模式匹配的各种可能性:

    -module(functions).
    -compile(export_all). %% replace with -export() later, for God's sake!

我们要写的第一个函数是 `head/1`，实际上跟`erlang:hd/1`一样，接收一个列表作为参数，返回它的第一个元素。它将在cons运算符(`|`)的参与下实现:

    head([H|_]) -> H.

如果你在shell中输入 `functions:head([1,2,3,4]).`(在这个模块编译之后)，你将得到值"1"。接下来，为了得到第二个元素，你需要创建函数:

    second([_,X|_]) -> X.

这个列表将被Erlang析构以匹配相应的模式。在shell中试试看!

    1> c(functions).
    {ok, functions}
    2> functions:head([1,2,3,4]).
    1
    3> functions:second([1,2,3,4]).
    2

你可以用写函数通过类似的匹配获得列表任意位置的元素，但是对于上千个元素的列表而言，这么做并不现实。这个问题可以通过递归函数来解决，我们将稍后提及。现在，让我们实现另一个模式匹配。我们再第三章提到的未绑定/绑定变量的概念，在这里依然有用:我们可以据此比较传递给函数的两个参数是否是同一个。通过这一点，我们可以创建 `same/2` 接受两个参数，然后返回它们是否是同一个:

    same(X,X) ->
    true;
    same(_,_) ->
    false.

就这么简单。在解释该函数是如何工作之前，我们将回顾一下绑定和未绑定变量的概念，如图:
##Image##

这里，新郎如此地沮丧是因为在Erlang，变量永远不能改变它的值: 没有自由!先把玩笑放一边，未绑定变量即没有任何值与它联系(就如单身的流浪汉)。绑定一个值只要简单地把一个值和一个未绑定变量联系起来。在Erlang的例子里，当你需要把一个值赋给一个已绑定的变量，除非新值跟旧值相同，否则会产生错误。让我们想象左边的新郎娶了双胞胎的其中一个为新娘:如果如果双胞胎的另一个来到，他不会察觉她们的不同，如常对待她。如果一个其他的女人来到，他就会抱怨了。如果这里解释对于你而言不够清晰，你可以重读前面关于"不可变的变量"一节。

回到我们的代码:当我们调用`same(a,a)`时，第一个`X`被发现是未绑定的:它自动与值a联系。然后Erlang分析第二个参数，它发现`X`已经被绑定了。于是它把X和作为第二个参数传入的`a`做比较，模式匹配成功，函数返回`true`。如果两个参数不相同则进入第二个函数分支，该分支不关心参数具体的值(当你只有最后一个选择时，你不能挑剔了!)，返回`false`。注意，这个函数可以高效地比较任意类型的参数，而不仅仅是列表或者单独的变量。更高级的例子，如下面用于打印日期的函数，但是只接收格式正确的参数:

    valid_time({Date = {Y,M,D}, Time = {H,Min,S}}) ->
        io:format("The Date tuple (~p) says today is: ~p/~p/~p,~n",[Date,Y,M,D]),
        io:format("The time tuple (~p) indicates: ~p:~p:~p.~n", [Time,H,Min,S]);
    valid_time(_) ->
        io:format("Stop feeding me wrong data!~n").

注意，在函数声明中使用运算符`=`是合理的，让我们可以同时匹配元组中的内容(`{Y,M,D}`)和整个元组(`Date`).函数可以通过下面的方式测试:

4> c(functions).
{ok, functions}
5> functions:valid_time({{2011,09,06},{09,04,43}}).
The Date tuple ({2011,9,6}) says today is: 2011/9/6,
The time tuple ({9,4,43}) indicates: 9:4:43.
ok
6> functions:valid_time({{2011,09,06},{09,04}}).
Stop feeding me wrong data!
ok

然而这里有个问题!这个函数可以接受任意值，甚至文本或者原子，只要元组的格式符合 `{{A,B,C}, {D,E,F}}`。这表明了模式匹配的限制:它可以指定精确的值如一个已知的数字或者原子##REVIEW##，或者抽象的值，如列表的 头|尾，拥有N个元素的元组，或者任何其他东西(`_`和未绑定变量)，等。要解决这个问题(译者:类型匹配)，我们使用守卫(guards)。


守卫，守卫!(Guards, Guards!)

